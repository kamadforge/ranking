import numpy as np
import torch
import glob
import os


dataset="cifar"

if dataset=="cifar":
    shapley_file=open("/home/kamil/Dropbox/Current_research/python_tests/results_shapley/combinations/94.34/zeroing_0.2val/shapley.txt")
    shapley=[]
    for line in shapley_file:
        line=line.strip()[1:-2]
        nums=line.split(",")
        nums_int=[int(i) for i in nums]
        shapley.append(nums_int)



    l1_file=open("/home/kamil/Dropbox/Current_research/python_tests/results_compression/l1.txt")
    l1=[]
    for line in l1_file:
        line.strip()
        nums=line.split(",")
        nums_int=[int(i) for i in nums]
        l1.append(nums_int)

    l2_file = open("/home/kamil/Dropbox/Current_research/python_tests/results_compression/l2.txt")
    l2 = []
    for line in l2_file:
        line.strip()
        nums = line.split(",")
        nums_int = [int(i) for i in nums]
        l2.append(nums_int)

    fisher_file = open("/home/kamil/Dropbox/Current_research/python_tests/results_compression/fisher.txt")
    fisher = []
    for line in fisher_file:
        line.strip()
        nums = line.split(",")
        nums_int = [int(i) for i in nums]
        fisher.append(nums_int)

    switches_file=open("/home/kamil/Dropbox/Current_research/python_tests/results_switch/results/cifar/vgg_94.34/switch_init_0.05_alpha_0.05_annealing_6000000/switch_init_0.05, alpha_0.05_ep1.txt")
    switches_all = []
    for line in switches_file:
        if "max" in line:
            line_rank=next(switches_file)
            line_rank.strip()
            nums = line_rank.split(",")
            nums_int = [int(i) for i in nums]
            switches_all.append(nums_int)





###########333

#mnist

if dataset=="mnist":
    shapley=[  [1,8,7,4,6,3,9,2,0,5],
                    [2,8,9,19,4,12,5,14,11,6,3,7,18,1,17,15,16,13,0,10],
                    [56,86,25,64,33,17,23,96,46,52,43,22,81,15,1,44,39,85,19,8,58,63,29,70,14,95,27,73,72,45,68,4,13,99,75,47,34,89,97,88,61,53,
                     21,50,93,57,94,51,82,60,98,40,76,62,30,9,84,
                     37,0,42,80,71,92,79,32,38,78,11,90,5,2,87,66,65,16,55,48,36,18,67,35,91,83,10,24,31,7,28,20,74,54,6,12,3,49,69,59,77,26,41],
                    [1,7,2,3,0,4,6,9,5,8,10,24,13,19,12,21,23,16,22,18,17,15,14,11,20]]

    l1=[[7, 0, 1, 3, 8, 6, 9, 2, 5, 4],
        [11, 17,  1,  3, 18, 16, 14, 12, 15, 19,  7, 13,  4,  0, 10,  5,  6, 8,  9,  2],
        [58, 56, 23, 64, 88, 96, 86, 33, 52,  9, 44, 97, 14,  4,  0, 17, 94,
       99, 87, 76, 25, 43, 73, 37, 70, 34, 61, 93, 69, 72, 30, 46, 59,  8,
       26, 40, 29, 63, 19, 90, 35,  1, 13, 27, 81, 57, 49, 77, 41, 68, 62,
       31, 98, 79,  2, 53, 21, 95, 85, 28, 22, 89, 82, 47, 51, 60, 15,  6,
       75, 45, 39, 84, 12, 50, 78, 54, 74, 65, 36, 11,  3, 20,  7,  5, 67,
       42, 92, 80, 48, 83, 91, 38, 71, 66, 24, 10, 18, 16, 55, 32],
        [ 1,  0,  6,  7,  4,  2,  3,  5,  9,  8, 22, 17, 18, 20, 23, 11, 15,
       10, 19, 12, 24, 16, 13, 21, 14]]

    l2=[[7, 1, 8, 0, 3, 2, 6, 9, 5, 4], [12, 18,  7, 11,  3, 16, 17, 19, 15,  1,  0,  5,  4, 14,  8, 13, 10,
        6,  2,  9], [58, 56, 23, 44, 64, 96, 88, 86, 52,  0, 87, 14, 97, 17, 99, 93, 25,
        9, 76,  4, 43, 46, 37, 33, 73, 94, 72, 26, 61, 30, 79, 90,  8, 69,
       41, 70, 59, 49, 35, 19, 34, 29, 40, 68,  1, 31, 63, 81, 62, 27, 22,
        2, 13, 28, 95, 98, 57, 53, 77, 21, 85, 89, 82, 47, 15, 51,  6, 50,
       75, 60, 45, 39, 12, 78, 84, 54, 74, 65,  3, 11, 36, 20,  5,  7, 67,
       42, 92, 80, 48, 83, 91, 38, 66, 71, 24, 10, 18, 16, 55, 32], [ 1,  0,  6,  7,  4,  5,  2,  3,  9,  8, 22, 17, 18, 11, 20, 23, 12,
       19, 10, 15, 13, 24, 16, 21, 14]]
    
    fisher=[
        [3, 8, 1, 6, 2, 7, 0, 9, 5, 4],
         [2, 9, 1, 19, 8, 17, 12, 16, 18, 5, 11, 15, 0, 6, 4, 7, 3, 10,
                 14, 13],
         [52, 25, 56, 86, 22, 90, 23, 44, 0, 96, 77, 97, 64, 58, 17, 14, 30, 88,
                 43, 4, 73, 93, 76, 41, 13, 87, 19, 9, 94, 99, 8, 59, 46, 27, 37, 57,
                 29, 75, 81, 62, 2, 61, 95, 31, 40, 15, 49, 47, 68, 98, 72, 53, 35, 26,
                 82, 12, 85, 63, 70, 34, 33, 60, 39, 1, 78, 54, 69, 89, 51, 45, 21, 79,
                 50, 28, 84, 6, 65, 20, 80, 3, 74, 11, 7, 18, 38, 67, 36, 5, 92, 24,
                 91, 10, 83, 55, 42, 16, 32, 66, 71, 48],
         [1, 6, 2, 0, 4, 8, 7, 5, 9, 3, 11, 12, 22, 20, 19, 13, 24, 10,
                 14, 18, 16, 17, 23, 15, 21]
    ]

    random = [[7, 2, 9, 0, 1, 5, 3, 8, 4, 6],
              [7, 8, 11, 10, 2, 9, 16, 4, 15, 0, 5, 6, 13, 14, 3, 17, 12,
               1, 19, 18],
              [11, 68, 87, 72, 10, 99, 20, 91, 4, 80, 53, 43, 0, 26, 14, 57, 36,
               56, 8, 41, 28, 31, 27, 63, 93, 34, 5, 94, 30, 67, 82, 1, 79, 19,
               50, 32, 89, 42, 88, 17, 70, 51, 69, 61, 16, 75, 44, 52, 74, 7, 81,
               47, 35, 85, 76, 95, 65, 60, 71, 48, 21, 25, 97, 66, 12, 84, 96, 49,
               54, 2, 23, 73, 78, 24, 37, 15, 9, 18, 45, 55, 22, 83, 92, 40, 29,
               58, 46, 62, 38, 3, 86, 6, 98, 13, 90, 33, 59, 39, 77, 64],
              [8, 0, 21, 17, 20, 19, 18, 5, 2, 3, 7, 12, 10, 13, 22, 4, 1,
               6, 16, 23, 24, 15, 14, 11, 9]]

##############################################
###############################

# fashion mnist
elif dataset=="fashionmnist":
    # shapley
    shapley = [
        [0, 1, 7, 2, 5, 9, 6, 8, 4, 3],
        [0, 5, 4, 13, 10, 7, 9, 15, 18, 17, 14, 12, 8, 19, 11, 16, 1, 3, 6, 2],
        [9, 35, 92, 60, 24, 76, 89, 75, 51, 82, 22, 43, 17, 50, 33, 53, 94, 79, 3, 21, 78, 10, 20, 81, 15, 87, 98, 80, 45,
         95, 64, 34, 54, 39, 19, 71, 59, 18, 25, 68, 31, 73, 14, 91, 72, 6, 63, 13, 27, 57, 23, 67, 86, 69, 2, 58, 47, 40,
         38, 49, 55, 61, 83, 29, 7, 66, 84, 11, 56, 74, 62, 1, 42, 46, 44, 41, 8, 4, 30, 88, 90, 48, 97, 5, 52, 28, 36, 70,
         26, 77, 85, 96, 99, 37, 12, 32, 65, 16, 93, 0],
        [1, 9, 5, 7, 3, 8, 4, 2, 6, 0, 24, 15, 11, 17, 10, 12, 22, 21, 20, 16, 19, 14, 23, 18, 13]
    ]
    ########3
    l1 = [
        [5, 0, 9, 4, 2, 1, 7, 8, 3, 6], [0, 17, 13, 12, 9, 15, 14, 10, 5, 1, 8, 4, 3, 7, 18, 11, 2,
                                                       16, 19, 6],
         [58, 76, 74, 29, 19, 86, 94, 25, 77, 50, 33, 2, 40, 60, 46, 1, 38,
                7, 5, 13, 15, 6, 56, 85, 51, 87, 93, 9, 37, 16, 4, 89, 95, 0,
                55, 54, 75, 80, 63, 49, 59, 20, 92, 70, 99, 90, 84, 96, 53, 32, 21,
                71, 36, 68, 18, 10, 98, 78, 64, 26, 34, 8, 39, 83, 24, 97, 82, 65,
                44, 45, 41, 88, 52, 3, 14, 47, 23, 69, 28, 48, 11, 72, 73, 27, 30,
                42, 62, 91, 67, 12, 57, 66, 22, 81, 43, 79, 35, 61, 17, 31],
         [8, 5, 1, 2, 6, 9, 0, 4, 3, 7, 11, 16, 21, 19, 24, 17, 22,
                23, 13, 18, 14, 20, 15, 12, 10]

    ]
    ############

    l2 = [[0, 4, 5, 1, 9, 8, 2, 7, 3, 6], [ 0, 17, 12, 13, 10, 15,  9,  5,  1, 14,  4,  3,  8,  7, 18,  2, 11,
       16, 19,  6], [76, 58, 74, 29, 19, 25, 94, 77, 33, 86, 60,  2, 40, 50,  5, 38, 89,
        1,  6, 46, 13, 51, 87, 56,  7, 37, 15,  0, 55, 75, 93, 16, 85,  9,
       92,  4, 49, 96, 63, 99, 53, 54, 70, 90, 95, 20, 59, 36, 10, 78, 18,
       83, 71, 80, 98, 21, 32, 84, 24, 68, 34,  8, 97, 47, 64, 26, 66, 39,
       65, 82, 88, 44, 23, 69, 52,  3, 11, 30, 45, 14, 41, 48, 27, 28, 62,
       22, 72, 12, 57, 91, 67, 61, 73, 79, 81, 42, 35, 43, 17, 31], [ 8,  5,  1,  6,  4,  9,  2,  7,  3,  0, 11, 21, 16, 19, 22, 24, 13,
       17, 23, 18, 14, 20, 15, 12, 10]
          ]


    ###########

    random= [[7, 2, 9, 0, 1, 5, 3, 8, 4, 6],
     [ 7,  8, 11, 10,  2,  9, 16,  4, 15,  0,  5,  6, 13, 14,  3, 17, 12,
             1, 19, 18],
     [11, 68, 87, 72, 10, 99, 20, 91,  4, 80, 53, 43,  0, 26, 14, 57, 36,
            56,  8, 41, 28, 31, 27, 63, 93, 34,  5, 94, 30, 67, 82,  1, 79, 19,
            50, 32, 89, 42, 88, 17, 70, 51, 69, 61, 16, 75, 44, 52, 74,  7, 81,
            47, 35, 85, 76, 95, 65, 60, 71, 48, 21, 25, 97, 66, 12, 84, 96, 49,
            54,  2, 23, 73, 78, 24, 37, 15,  9, 18, 45, 55, 22, 83, 92, 40, 29,
            58, 46, 62, 38,  3, 86,  6, 98, 13, 90, 33, 59, 39, 77, 64],
     [ 8,  0, 21, 17, 20, 19, 18,  5,  2,  3,  7, 12, 10, 13, 22,  4,  1,
             6, 16, 23, 24, 15, 14, 11,  9]]
    #######################################################
    
    fisher=[
        [0, 6, 1, 9, 7, 5, 4, 3, 8, 2],
         [14, 17, 8, 15, 0, 13, 4, 12, 1, 9, 7, 5, 10, 11, 2, 3, 18, 16,
                 19, 6],
         [58, 94, 92, 50, 60, 6, 70, 25, 55, 76, 75, 85, 9, 33, 99, 15, 39, 13,
                 40, 16, 77, 43, 1, 7, 51, 23, 54, 59, 74, 84, 29, 78, 56, 19, 18, 12,
                 88, 2, 38, 95, 63, 90, 80, 86, 20, 71, 36, 45, 79, 89, 44, 5, 98, 8,
                 11, 67, 47, 37, 87, 97, 46, 48, 30, 53, 65, 10, 21, 96, 61, 0, 4, 34,
                 64, 3, 24, 91, 69, 93, 52, 41, 68, 49, 26, 83, 28, 32, 27, 62, 66, 57,
                 81, 22, 42, 35, 82, 14, 72, 17, 73, 31],
         [6, 4, 2, 0, 3, 7, 9, 5, 8, 1, 19, 16, 23, 13, 20, 18, 22, 12,
                 21, 11, 17, 14, 24, 15, 10]
    ]
    
    
##########################################3
#################################3###############
if (dataset == 'mnist') or (dataset == 'fashionmnist'):
    switches_all = []
    for layer in ["c1", "c3", "c5", "f6"]:
        path='/home/kamil/Dropbox/Current_research/python_tests/results_switch/results/%s/switch_init_-1,alpha_2_proper/layer-%s_epoch-3_accuracy*.pt' % (dataset, layer)
        pts = glob.glob(path)
        switches = torch.load(pts[0])
        name = os.path.split(pts[0])[1][:-3]
    # elif dataset=='cifar':
    #     #path='/home/kamil/Dropbox/Current_research/python_tests/Dir_switch/results/cifar/vgg_93.92/switch_init_-1, alpha_2/93.92_%s_ep49.pt' % layer
    #     path='/home/kamil/Dropbox/Current_research/python_tests/results_switch/results/cifar/vgg_93.92/switch_init_%.2f, alpha_%.2f/93.92_alpha%.2f_switchinit%.2f_%s_ep%d.pt' % (switch_init, alpha, switch_init, alpha, layer, epoch_num)
    #     switches=torch.load(path)
    #     name = os.path.split(path)[1][:-3]



        print(switches)

        switches=switches.cpu().detach().numpy()


        switches_sorted=np.sort(switches)[::-1]
        switchesarg_sorted=np.argsort(switches)[::-1]

        print(switchesarg_sorted)

        switches_all.append(switchesarg_sorted.tolist())

    print(switches_all)

##################################################



#########################################
#############################################3
#################################################################################################################3

num_layers=12
ave_allnetwork=0


for layer in range(num_layers):
    rank_shap=shapley[layer]
    rank_other=l2[layer]
    print(rank_other)

    sum=0
    items=0
    for i1 in range((int(np.floor(len(rank_other))))):
        i1_channel=rank_other[i1]
        for i2 in range(len(rank_shap)):
            i2_channel=rank_shap[i2]
            if i1_channel==i2_channel:
                items+=1
                sum += np.abs(i1 - i2)
            #if i1==i2:
            #    items+=1
            #    pos1=rank_shap.index(i1)
            #    pos2=rank_other.index(i2)
            #    sum+=np.abs(pos1-pos2)

    ave=float(sum)/len(rank_shap)
    print("*"*55)
    print("Average distance: %.1f for %d items" % (ave,items))
    ave_allnetwork+=ave

print("*"*100, "\n", "*"*100)
print("All avera: %.1f" % (ave_allnetwork/num_layers))

